package com.tharang.demo;

import com.mysql.jdbc.util.Base64Decoder;
import com.tharang.demo.ASUAffiliation.StudentASUAffiliation;
import com.tharang.demo.ASUAffiliation.StudentASUAffiliationRepository;
import com.tharang.demo.academicYearAddressAndPhone.StudentAcademicYearAddressAndPhone;
import com.tharang.demo.academicYearAddressAndPhone.StudentAcademicYearAddressAndPhoneRepository;
import com.tharang.demo.coursework.StudentCurrentlyEnrolledCoursework;
import com.tharang.demo.coursework.StudentCurrentlyEnrolledCourseworkRepository;
import com.tharang.demo.coursework.StudentMathematicsAndScienceCoursesCompleted;
import com.tharang.demo.coursework.StudentMathematicsAndScienceCoursesCompletedRepository;
import com.tharang.demo.credentials.Login;
import com.tharang.demo.education.*;
import com.tharang.demo.eligibility.StudentEligibility;
import com.tharang.demo.eligibility.StudentEligibilityRepository;
import com.tharang.demo.finalWaiver.StudentFinalWaiver;
import com.tharang.demo.finalWaiver.StudentFinalWaiverRepository;
import com.tharang.demo.homeAddressAndPhone.StudentHomeAddressAndPhone;
import com.tharang.demo.homeAddressAndPhone.StudentHomeAddressAndPhoneRepository;
import com.tharang.demo.knowledgeOfMtbi.StudentKnowledgeOfMtbi;
import com.tharang.demo.knowledgeOfMtbi.StudentKnowledgeOfMtbiRepository;
import com.tharang.demo.model.Role;
import com.tharang.demo.model.User;
import com.tharang.demo.name.StudentName;
import com.tharang.demo.name.StudentNameRepository;
import com.tharang.demo.personalInfo.StudentPersonalInfo;
import com.tharang.demo.personalInfo.StudentPersonalInfoRepository;
import com.tharang.demo.personalStatement.StudentPersonalStatement;
import com.tharang.demo.personalStatement.StudentPersonalStatementBAO;
import com.tharang.demo.personalStatement.StudentPersonalStatementRepository;
import com.tharang.demo.respository.RoleRepository;
import com.tharang.demo.service.SecurityService;
import com.tharang.demo.service.UserService;
import com.tharang.demo.submission.StudentSubmission;
import com.tharang.demo.respository.UserRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.util.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;


import javax.mail.internet.ContentDisposition;
import javax.mail.internet.MimeMessage;
import javax.persistence.Convert;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import java.io.*;
import java.net.URI;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;

import javax.mail.internet.MimeMessage;
import javax.xml.ws.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;



@RestController
public class ConsolidatedGenerator {
    @Autowired
    private UserService userService;

    @Autowired
    private SecurityService securityService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    private static final Logger LOGGER = LogManager.getLogger(ConsolidatedGenerator.class);

    @Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StudentEligibilityRepository studentEligibilityRepository;

    @Autowired
    private StudentNameRepository studentNameRepository;

    @Autowired
    private StudentHomeAddressAndPhoneRepository studentHomeAddressAndPhoneRepository;

    @Autowired
    private StudentAcademicYearAddressAndPhoneRepository studentAcademicYearAddressAndPhoneRepository;

    @Autowired
    private StudentPersonalInfoRepository studentPersonalInfoRepository;

    @Autowired
    private StudentASUAffiliationRepository studentASUAffiliationRepository;

    @Autowired
    private StudentKnowledgeOfMtbiRepository studentKnowledgeOfMtbiRepository;

    @Autowired
    private StudentEducationRepository studentEducationRepository;

    @Autowired
    private StudentCurrentCollegeOrUniversityRepository studentCurrentCollegeOrUniversityRepository;

    @Autowired
    private StudentPreviousCollegeOrUniversityRepository studentPreviousCollegeOrUniversityRepository;

    @Autowired
    private StudentCurrentlyEnrolledCourseworkRepository studentCurrentlyEnrolledCourseworkRepository;

    @Autowired
    private StudentMathematicsAndScienceCoursesCompletedRepository studentMathematicsAndScienceCoursesCompletedRepository;

    @Autowired
    private StudentPersonalStatementRepository studentPersonalStatementRepository;

    @Autowired
    private StudentFinalWaiverRepository studentFinalWaiverRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private JavaMailSender sender;

    @RequestMapping(path="/consolidated", method=RequestMethod.GET)
    public ResponseEntity<Resource> serveConsolidated(){
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet1 = workbook.createSheet("Applicant Data");
        XSSFSheet sheet2 = workbook.createSheet("Current Coursework Data");
        XSSFSheet sheet3 = workbook.createSheet("Previous Coursework Data");

        String [] fieldNamesInSheet1 = {"username","email",
                "first name","middle name","last name","suffix",
        "eligibility1","eligibility2","eligibility3",
        "country - home address","address line 1 - home address","address line 2 - home address", "city - home address", "state - home address","zip - home address", "mail receivable - home address","home phone - home address", "mobile phone - home address",
                "country - academic year address","address line 1 - academic year address","address line 2 - academic year address", "city - academic year address", "state - academic year address","zip - academic year address", "mail receivable - academic year address","home phone - academic year address", "mobile phone - academic year address",
        "date of birth","city of birth","state of birth","country of birth","gender","race","US citizenship","residing in US","visa status","first generation to attend college",
        "MTBI previous participation","MTBI participation date","JBMSHP previous participation","JBMSHP participation date","applied to a graduate program","name of graduate program applied to","faculty referral","referrer name",
        "how do you know of MTBI",
        "major","minor","last date of class","unweighted GPA","GPA scale","currently enrolled year","extra degrees","extra degrees list","awards","math or science experiences",
        "country - current college","state - current college","city - current college","current college or university name","graduation date - current college",
        "country - previous college","state - previous college","city - previous college","previous college or university name","graduation date - previous college or university",
        "signed name on waiver","waived","recommender name", "recommender position","recommender title","recommender company","recommender address","recommender email","recommender phone","recommender fax","acknowledgement1","acknowledgement2","acknowledgement3"};

        String [] fieldNamesInSheet2 = {"username","course number","semester","year","course title","college or university"};
        String [] fieldNamesInSheet3 = {"username","course number","semester","year","course title","college or university","grade"};

        int rowNumSheet1 = 0;int colNumSheet1=0;
        Row rowSheet1 = sheet1.createRow(rowNumSheet1++);
        for(String s : fieldNamesInSheet1) {
            Cell cell = rowSheet1.createCell(colNumSheet1++);
            cell.setCellValue(s);
        }

        int rowNumSheet2 = 0;int colNumSheet2=0;
        Row rowSheet2 = sheet2.createRow(rowNumSheet2++);
        for(String s : fieldNamesInSheet2) {
            Cell cell = rowSheet2.createCell(colNumSheet2++);
            cell.setCellValue(s);
        }

        int rowNumSheet3 = 0;int colNumSheet3=0;
        Row rowSheet3 = sheet3.createRow(rowNumSheet3++);
        for(String s : fieldNamesInSheet3) {
            Cell cell = rowSheet3.createCell(colNumSheet3++);
            cell.setCellValue(s);
        }

        try {
            FileOutputStream outputStream = new FileOutputStream("/home/beck/mtbi/studentData.xlsx");

            Iterable<User> userIteratableList = userRepository.findAll();
            for(User user : userIteratableList) {
                if (user.getSubmitted().equals("1")) {
                    String username = user.getUsername();
                    String email = user.getEmail();
                    StudentSubmission studentData = new StudentSubmission();
                    StudentEligibility studentEligibility = null;
                    StudentName studentName = null;
                    StudentHomeAddressAndPhone studentHomeAddressAndPhone = null;
                    StudentAcademicYearAddressAndPhone studentAcademicYearAddressAndPhone = null;
                    StudentPersonalInfo studentPersonalInfo = null;
                    StudentASUAffiliation studentASUAffiliation = null;
                    StudentKnowledgeOfMtbi studentKnowledgeOfMtbi = null;
                    StudentEducation studentEducation = null;
                    StudentCurrentCollegeOrUniversity studentCurrentCollegeOrUniversity = null;
                    StudentPreviousCollegeOrUniversity studentPreviousCollegeOrUniversity = null;
                    List<StudentCurrentlyEnrolledCoursework> studentCurrentlyEnrolledCoursework = new ArrayList<StudentCurrentlyEnrolledCoursework>();
                    List<StudentMathematicsAndScienceCoursesCompleted> studentMathematicsAndScienceCoursesCompleted = new ArrayList<StudentMathematicsAndScienceCoursesCompleted>();
                    StudentPersonalStatementBAO studentPersonalStatementBAO = new StudentPersonalStatementBAO();
                    StudentPersonalStatement studentPersonalStatement = null;
                    StudentFinalWaiver studentFinalWaiver = null;

                    studentData.setSubmitted(userRepository.findByUsername(username).getSubmitted());
                    if (studentEligibilityRepository.existsByUserId(username))
                        studentEligibility = studentEligibilityRepository.findByUserId(username);
                    if (studentNameRepository.existsByUserId(username))
                        studentName = studentNameRepository.findByUserId(username);
                    if (studentHomeAddressAndPhoneRepository.existsByUserId(username))
                        studentHomeAddressAndPhone = studentHomeAddressAndPhoneRepository.findByUserId(username);
                    if (studentAcademicYearAddressAndPhoneRepository.existsByUserId(username))
                        studentAcademicYearAddressAndPhone = studentAcademicYearAddressAndPhoneRepository.findByUserId(username);
                    if (studentPersonalInfoRepository.existsByUserId(username))
                        studentPersonalInfo = studentPersonalInfoRepository.findByUserId(username);
                    if (studentASUAffiliationRepository.existsByUserId(username))
                        studentPersonalInfo = studentPersonalInfoRepository.findByUserId(username);
                    if (studentKnowledgeOfMtbiRepository.existsByUserId(username))
                        studentKnowledgeOfMtbi = studentKnowledgeOfMtbiRepository.findByUserId(username);
                    if (studentEducationRepository.existsByUserId(username))
                        studentEducation = studentEducationRepository.findByUserId(username);
                    if (studentCurrentCollegeOrUniversityRepository.existsByUserId(username))
                        studentCurrentCollegeOrUniversity = studentCurrentCollegeOrUniversityRepository.findByUserId(username);
                    if (studentPreviousCollegeOrUniversityRepository.existsByUserId(username))
                        studentPreviousCollegeOrUniversity = studentPreviousCollegeOrUniversityRepository.findByUserId(username);
                    if (studentASUAffiliationRepository.existsByUserId(username))
                        studentASUAffiliation = studentASUAffiliationRepository.findByUserId(username);
                    if (studentCurrentlyEnrolledCourseworkRepository.existsByUserId(username))
                        for (StudentCurrentlyEnrolledCoursework c : studentCurrentlyEnrolledCourseworkRepository.findAllByUserId(username)) {
                            studentCurrentlyEnrolledCoursework.add(c);
                        }

                    if (studentMathematicsAndScienceCoursesCompletedRepository.existsByUserId(username))
                        for (StudentMathematicsAndScienceCoursesCompleted c : studentMathematicsAndScienceCoursesCompletedRepository.findAllByUserId(username)) {
                            studentMathematicsAndScienceCoursesCompleted.add(c);
                        }
                    //if(studentPersonalStatementRepository.existsByUserId(username))
                    //    studentPersonalStatement = studentPersonalStatementRepository.findByUserId(username);

                    if (studentFinalWaiverRepository.existsByUserId(username))
                        studentFinalWaiver = studentFinalWaiverRepository.findByUserId(username);


                    String [] cells1 = {username,email,
                    studentName.getFirstName(),studentName.getMiddleName(),studentName.getLastName(),studentName.getSuffix(),
                    studentEligibility.getEligibility1(),studentEligibility.getEligibility2(),studentEligibility.getEligibility3(),
                    studentHomeAddressAndPhone.getCountry(),studentHomeAddressAndPhone.getAddressLine1(),studentHomeAddressAndPhone.getAddressLine2(),studentHomeAddressAndPhone.getCity(),studentHomeAddressAndPhone.getState(),studentHomeAddressAndPhone.getZip(),studentHomeAddressAndPhone.getMailReceivable(),studentHomeAddressAndPhone.getHomePhone(),studentHomeAddressAndPhone.getMobilePhone(),
                            studentAcademicYearAddressAndPhone.getCountry(),studentAcademicYearAddressAndPhone.getAddressLine1(),studentAcademicYearAddressAndPhone.getAddressLine2(),studentAcademicYearAddressAndPhone.getCity(),studentAcademicYearAddressAndPhone.getState(),studentAcademicYearAddressAndPhone.getZip(),studentAcademicYearAddressAndPhone.getMailReceivable(),studentAcademicYearAddressAndPhone.getHomePhone(),studentAcademicYearAddressAndPhone.getMobilePhone(),
                    studentPersonalInfo.getDateOfBirth(),studentPersonalInfo.getCityOfBirth(),studentPersonalInfo.getStateOfBirth(),studentPersonalInfo.getCountryOfBirth(),studentPersonalInfo.getGender(),studentPersonalInfo.getRace(),studentPersonalInfo.getUsCitizenship(),studentPersonalInfo.getResidingInUS(),studentPersonalInfo.getVisaStatus(),studentPersonalInfo.getFirstGenerationToAttendCollege(),
                    studentASUAffiliation.getMtbiPreviousParticipation(),studentASUAffiliation.getMtbiParticipationDate(),studentASUAffiliation.getJbmshpPreviousParticipation(),studentASUAffiliation.getJbmshpParticipationDate(),studentASUAffiliation.getGraduateProgramApplication(),studentASUAffiliation.getNameOfGraduateProgram(),studentASUAffiliation.getFacultyReferral(),studentASUAffiliation.getReferrerName(),
                    studentKnowledgeOfMtbi.getKnowledgeOfMtbi(),
                    studentEducation.getMajor(),studentEducation.getMinor(),studentEducation.getLastDateOfClass(),studentEducation.getUnweightedGPA(),studentEducation.getGpaScale(),studentEducation.getCurrentEnrolledYear(),studentEducation.getExtraDegrees(),studentEducation.getExtraDegreesList(),studentEducation.getAwards(),studentEducation.getMathOrSciExperiences(),
                    studentCurrentCollegeOrUniversity.getCountry(),studentCurrentCollegeOrUniversity.getState(),studentCurrentCollegeOrUniversity.getCity(),studentCurrentCollegeOrUniversity.getCollegeOrUniversity(),studentCurrentCollegeOrUniversity.getGraduationDate(),
                    studentPreviousCollegeOrUniversity.getCountry(),studentPreviousCollegeOrUniversity.getState(),studentPreviousCollegeOrUniversity.getCity(),studentPreviousCollegeOrUniversity.getCollegeOrUniversity(),studentPreviousCollegeOrUniversity.getGraduationDate(),
                    studentFinalWaiver.getName(),studentFinalWaiver.getWaiveOrNot(),studentFinalWaiver.getRecommenderName(),studentFinalWaiver.getRecommenderPosition(),studentFinalWaiver.getRecommenderTitle(),studentFinalWaiver.getRecommenderCompany(),studentFinalWaiver.getRecommenderAddress(),studentFinalWaiver.getRecommenderEmail(),studentFinalWaiver.getRecommenderPhone(),studentFinalWaiver.getRecommenderFax(),studentFinalWaiver.getAcknowledgement1(),studentFinalWaiver.getAcknowledgement2(),studentFinalWaiver.getAcknowledgement3()};
                    Row row1 = sheet1.createRow(rowNumSheet1++);
                    int colNum1 = 0;
                    for(String s : cells1) {
                        Cell cell = row1.createCell(colNum1++);
                        cell.setCellValue(s);
                    }

                    for(StudentCurrentlyEnrolledCoursework c : studentCurrentlyEnrolledCoursework){
                        String [] cells2 = {username, c.getCourseNumber(),c.getSemester(),c.getYear(),c.getCourseTitle(),c.getCollegeOrUniversity()};
                        Row row2 = sheet2.createRow(rowNumSheet2++);
                        int colNum2 = 0;
                        for(String s: cells2){
                            Cell cell = row2.createCell(colNum2++);
                            cell.setCellValue(s);
                        }
                    }

                    for(StudentMathematicsAndScienceCoursesCompleted c : studentMathematicsAndScienceCoursesCompleted){
                        String [] cells3 = {username, c.getCourseNumber(),c.getSemester(),c.getYear(),c.getCourseTitle(),c.getCollegeOrUniversity(),c.getGrade()};
                        Row row3 = sheet3.createRow(rowNumSheet2++);
                        int colNum3 = 0;
                        for(String s: cells3){
                            Cell cell = row3.createCell(colNum3++);
                            cell.setCellValue(s);
                        }
                    }
                }
            }
            workbook.write(outputStream);
            workbook.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            InputStreamResource resource;

            resource = new InputStreamResource(new FileInputStream("/home/beck/mtbi/studentData.xlsx"));
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.parseMediaType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));
            return new ResponseEntity<>(resource,headers,HttpStatus.OK);
        }
        catch(FileNotFoundException e){
            LOGGER.error(e);
        }
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

    }


}


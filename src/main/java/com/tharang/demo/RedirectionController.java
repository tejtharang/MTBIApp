package com.tharang.demo;

import com.tharang.demo.ASUAffiliation.StudentASUAffiliation;
import com.tharang.demo.ASUAffiliation.StudentASUAffiliationRepository;
import com.tharang.demo.academicYearAddressAndPhone.StudentAcademicYearAddressAndPhone;
import com.tharang.demo.academicYearAddressAndPhone.StudentAcademicYearAddressAndPhoneRepository;
import com.tharang.demo.coursework.StudentCurrentlyEnrolledCoursework;
import com.tharang.demo.coursework.StudentCurrentlyEnrolledCourseworkRepository;
import com.tharang.demo.coursework.StudentMathematicsAndScienceCoursesCompleted;
import com.tharang.demo.coursework.StudentMathematicsAndScienceCoursesCompletedRepository;
import com.tharang.demo.credentials.Login;
import com.tharang.demo.education.*;
import com.tharang.demo.eligibility.StudentEligibility;
import com.tharang.demo.eligibility.StudentEligibilityRepository;
import com.tharang.demo.finalWaiver.StudentFinalWaiver;
import com.tharang.demo.finalWaiver.StudentFinalWaiverRepository;
import com.tharang.demo.homeAddressAndPhone.StudentHomeAddressAndPhone;
import com.tharang.demo.homeAddressAndPhone.StudentHomeAddressAndPhoneRepository;
import com.tharang.demo.knowledgeOfMtbi.StudentKnowledgeOfMtbi;
import com.tharang.demo.knowledgeOfMtbi.StudentKnowledgeOfMtbiRepository;
import com.tharang.demo.model.Role;
import com.tharang.demo.name.StudentName;
import com.tharang.demo.name.StudentNameRepository;
import com.tharang.demo.personalInfo.StudentPersonalInfo;
import com.tharang.demo.personalInfo.StudentPersonalInfoRepository;
import com.tharang.demo.personalStatement.StudentPersonalStatement;
import com.tharang.demo.personalStatement.StudentPersonalStatementBAO;
import com.tharang.demo.personalStatement.StudentPersonalStatementRepository;
import com.tharang.demo.respository.RoleRepository;
import com.tharang.demo.respository.UserRepository;
import com.tharang.demo.service.SecurityService;
import com.tharang.demo.service.UserService;
import com.tharang.demo.submission.StudentSubmission;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;
import org.springframework.web.util.UriComponents;

import javax.ws.rs.PathParam;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

@Controller
public class RedirectionController {

    @Autowired
    private UserService userService;

    @Autowired
    private SecurityService securityService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    private static final Logger LOGGER = LogManager.getLogger(MainController.class);

    @Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private StudentEligibilityRepository studentEligibilityRepository;

    @Autowired
    private StudentNameRepository studentNameRepository;

    @Autowired
    private StudentHomeAddressAndPhoneRepository studentHomeAddressAndPhoneRepository;

    @Autowired
    private StudentAcademicYearAddressAndPhoneRepository studentAcademicYearAddressAndPhoneRepository;

    @Autowired
    private StudentPersonalInfoRepository studentPersonalInfoRepository;

    @Autowired
    private StudentASUAffiliationRepository studentASUAffiliationRepository;

    @Autowired
    private StudentKnowledgeOfMtbiRepository studentKnowledgeOfMtbiRepository;

    @Autowired
    private StudentEducationRepository studentEducationRepository;

    @Autowired
    private StudentCurrentCollegeOrUniversityRepository studentCurrentCollegeOrUniversityRepository;

    @Autowired
    private StudentPreviousCollegeOrUniversityRepository studentPreviousCollegeOrUniversityRepository;

    @Autowired
    private StudentCurrentlyEnrolledCourseworkRepository studentCurrentlyEnrolledCourseworkRepository;

    @Autowired
    private StudentMathematicsAndScienceCoursesCompletedRepository studentMathematicsAndScienceCoursesCompletedRepository;

    @Autowired
    private StudentPersonalStatementRepository studentPersonalStatementRepository;

    @Autowired
    private StudentFinalWaiverRepository studentFinalWaiverRepository;

    @Autowired
    private RoleRepository roleRepository;


    @GetMapping(value = {"/", "/welcome"})
    public String welcomePage() {
        return "index.html";
    }

    @GetMapping(value = "/register")
    public String userAccountCreationPage() {
        return "addnewuser.html";
    }

    /*
    @GetMapping(value = "/login")
    @Consumes()
    public String loginPage() {
        return "login.html";
    }
    */


    @GetMapping(value = "/adminRegister")
    public String adminAccountCreationPage(){ return "newAdmin.html";}

    @GetMapping(value = "/adminWelcome")
    public String adminWelcomePage(){
        return "adminLanding.html";
    }

    @GetMapping(value ="/adminMainPage")
    public String giveAdminMainPage(){
        return "adminPortal.html";
    }

    @GetMapping(value = "/applicationform")
    public String formPage() {
        return "form.html";
    }

    @GetMapping(value = "/logoutSuccessful")
    public String logoutSuccessfulPage() {
        return "Logout Successful!";
    }

    @GetMapping(value="/form_submitted")
    public String submittedForm(){ return "submittedform.html";}
    @GetMapping(value = "/403")
    public String accessDenied(Principal principal) {
        if (principal != null) {
            User loggedInUser = (User) ((Authentication) principal).getPrincipal();
            //todo : have to user template to develop customized messages
        }
        return "403.html";
    }

    @GetMapping(value="/signin")
    public String loginPage(){
        return "login.html";
    }

    @GetMapping(value="/signinAdmin")
    public String adminLoginPage(){
        return "adminLogin.html";
    }


    @GetMapping(path="/applicantdata/{applicantId}")
    public String giveFreemarker(@PathVariable("applicantId") String applicantId, Model model, Authentication authentication){

        com.tharang.demo.model.User user = userService.findByUsername(authentication.getName());
        Role role = roleRepository.findDistinctByUsername(authentication.getName());
        if(user.getActive().equals("INACTIVE") || !role.getRoleName().equals("ADMIN")){
            return "error";
        }

        StudentEligibility studentEligibility = null;
        StudentName studentName = null;
        StudentHomeAddressAndPhone studentHomeAddressAndPhone = null;
        StudentAcademicYearAddressAndPhone studentAcademicYearAddressAndPhone = null;
        StudentPersonalInfo studentPersonalInfo = null;
        StudentASUAffiliation studentASUAffiliation = null;
        StudentKnowledgeOfMtbi studentKnowledgeOfMtbi = null;
        StudentEducation studentEducation = null;
        StudentCurrentCollegeOrUniversity studentCurrentCollegeOrUniversity = null;
        StudentPreviousCollegeOrUniversity studentPreviousCollegeOrUniversity = null;
        List<StudentCurrentlyEnrolledCoursework> studentCurrentlyEnrolledCoursework = new ArrayList<StudentCurrentlyEnrolledCoursework>();
        List<StudentMathematicsAndScienceCoursesCompleted> studentMathematicsAndScienceCoursesCompleted = new ArrayList<StudentMathematicsAndScienceCoursesCompleted>();
        StudentPersonalStatementBAO studentPersonalStatementBAO = new StudentPersonalStatementBAO();
        StudentPersonalStatement studentPersonalStatement = null;
        StudentFinalWaiver studentFinalWaiver = null;

        if(studentEligibilityRepository.existsByUserId(applicantId))
            studentEligibility = studentEligibilityRepository.findByUserId(applicantId);
        if(studentNameRepository.existsByUserId(applicantId))
            studentName = studentNameRepository.findByUserId(applicantId);
        if(studentHomeAddressAndPhoneRepository.existsByUserId(applicantId))
            studentHomeAddressAndPhone = studentHomeAddressAndPhoneRepository.findByUserId(applicantId);
        if(studentAcademicYearAddressAndPhoneRepository.existsByUserId(applicantId))
            studentAcademicYearAddressAndPhone = studentAcademicYearAddressAndPhoneRepository.findByUserId(applicantId);
        if(studentPersonalInfoRepository.existsByUserId(applicantId))
            studentPersonalInfo = studentPersonalInfoRepository.findByUserId(applicantId);
        if(studentASUAffiliationRepository.existsByUserId(applicantId))
            studentASUAffiliation = studentASUAffiliationRepository.findByUserId(applicantId);
        if(studentKnowledgeOfMtbiRepository.existsByUserId(applicantId))
            studentKnowledgeOfMtbi = studentKnowledgeOfMtbiRepository.findByUserId(applicantId);
        if(studentEducationRepository.existsByUserId(applicantId))
            studentEducation = studentEducationRepository.findByUserId(applicantId);
        if(studentCurrentCollegeOrUniversityRepository.existsByUserId(applicantId))
            studentCurrentCollegeOrUniversity = studentCurrentCollegeOrUniversityRepository.findByUserId(applicantId);
        if(studentPreviousCollegeOrUniversityRepository.existsByUserId(applicantId))
            studentPreviousCollegeOrUniversity = studentPreviousCollegeOrUniversityRepository.findByUserId(applicantId);
        if(studentASUAffiliationRepository.existsByUserId(applicantId))
            studentASUAffiliation = studentASUAffiliationRepository.findByUserId(applicantId);
        if(studentCurrentlyEnrolledCourseworkRepository.existsByUserId(applicantId))
            for(StudentCurrentlyEnrolledCoursework c : studentCurrentlyEnrolledCourseworkRepository.findAllByUserId(applicantId)){
                studentCurrentlyEnrolledCoursework.add(c);
            }

        if(studentMathematicsAndScienceCoursesCompletedRepository.existsByUserId(applicantId))
            for(StudentMathematicsAndScienceCoursesCompleted c : studentMathematicsAndScienceCoursesCompletedRepository.findAllByUserId(applicantId)){
                c.setCourseTitle(c.getCourseTitle().substring(0,c.getCourseTitle().length()-4));
            studentMathematicsAndScienceCoursesCompleted.add(c);
            }
        if(studentPersonalStatementRepository.existsByUserId(applicantId))
            studentPersonalStatement = studentPersonalStatementRepository.findByUserId(applicantId);

        if(studentFinalWaiverRepository.existsByUserId(applicantId))
            studentFinalWaiver = studentFinalWaiverRepository.findByUserId(applicantId);

        // Setting student Personal Statement
        studentPersonalStatementBAO.setUserId(applicantId);
        try {
            String[] str = studentPersonalStatement.getLocationOfFile().split("/");
            studentPersonalStatementBAO.setFileName(str[str.length - 1]);

        }
        catch(Exception e){
            LOGGER.error("Student Personal Statement is empty");
        }
        model.addAttribute("username", studentName.getUserId());
        model.addAttribute("name",studentName);
        model.addAttribute("eligibility",studentEligibility);
        model.addAttribute("studentHomeAddressAndPhone",studentHomeAddressAndPhone);
        model.addAttribute("studentAcademicYearAddressAndPhone",studentAcademicYearAddressAndPhone);
        model.addAttribute("studentPersonalInfo",studentPersonalInfo);
        model.addAttribute("studentASUAffiliation",studentASUAffiliation);
        model.addAttribute("studentKnowledgeOfMtbi",studentKnowledgeOfMtbi);
        model.addAttribute("studentEducation",studentEducation);
        model.addAttribute("studentCurrentCollegeOrUniversity",studentCurrentCollegeOrUniversity);
        model.addAttribute("studentPreviousCollegeOrUniversity", studentPreviousCollegeOrUniversity);
        model.addAttribute("studentCurrentlyEnrolledCoursework",studentCurrentlyEnrolledCoursework);
        model.addAttribute("studentMathematicsAndScienceCoursesCompleted",studentMathematicsAndScienceCoursesCompleted);
        model.addAttribute("studentPersonalStatement",studentPersonalStatement);
        model.addAttribute("studentFinalWaiver", studentFinalWaiver);
        return "applicantFile";
    }

}
